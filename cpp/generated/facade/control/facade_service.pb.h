// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facade/control/facade_service.proto

#ifndef PROTOBUF_INCLUDED_facade_2fcontrol_2ffacade_5fservice_2eproto
#define PROTOBUF_INCLUDED_facade_2fcontrol_2ffacade_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/add_channels.pb.h"
#include "common/attach_channels.pb.h"
#include "common/handover_data.pb.h"
#include "facade/control/setup.pb.h"
#include "facade/control/heartbeat.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto 

namespace protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto
namespace com {
namespace fleetmgr {
namespace interfaces {
namespace facade {
namespace control {
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ControlMessage;
class ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
}  // namespace control
}  // namespace facade
}  // namespace interfaces
}  // namespace fleetmgr
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::fleetmgr::interfaces::facade::control::ClientMessage* Arena::CreateMaybeMessage<::com::fleetmgr::interfaces::facade::control::ClientMessage>(Arena*);
template<> ::com::fleetmgr::interfaces::facade::control::ControlMessage* Arena::CreateMaybeMessage<::com::fleetmgr::interfaces::facade::control::ControlMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace fleetmgr {
namespace interfaces {
namespace facade {
namespace control {

enum Command {
  UNDEFINED_CMD = 0,
  HEARTBEAT = 1,
  SETUP = 2,
  RELEASE = 3,
  ADD_CHANNELS = 11,
  REMOVE_CHANNELS = 12,
  ATTACH_CHANNELS = 13,
  RELEASE_CHANNELS = 14,
  CHANNELS_READY = 15,
  REQUEST_CONTROL = 21,
  RELEASE_CONTROL = 22,
  CONTROL_RELEASED = 23,
  CONTROL_READY = 24,
  OPERATION_ENDED = 31,
  DEVICE_UNREACHABLE = 41,
  LEADER_UNREACHABLE = 42,
  RECOVERY = 43,
  DEVICE_RECOVERED = 44,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Command_IsValid(int value);
const Command Command_MIN = UNDEFINED_CMD;
const Command Command_MAX = DEVICE_RECOVERED;
const int Command_ARRAYSIZE = Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_descriptor();
inline const ::std::string& Command_Name(Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_descriptor(), value);
}
inline bool Command_Parse(
    const ::std::string& name, Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum Response {
  UNDEFINED_RSP = 0,
  ACCEPTED = 1,
  REJECTED = 2,
  Response_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_IsValid(int value);
const Response Response_MIN = UNDEFINED_RSP;
const Response Response_MAX = REJECTED;
const int Response_ARRAYSIZE = Response_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_descriptor();
inline const ::std::string& Response_Name(Response value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_descriptor(), value);
}
inline bool Response_Parse(
    const ::std::string& name, Response* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response>(
    Response_descriptor(), name, value);
}
// ===================================================================

class ClientMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fleetmgr.interfaces.facade.control.ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientMessage* other);
  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(NULL);
  }

  ClientMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .com.fleetmgr.interfaces.facade.control.SetupRequest attach = 50;
  bool has_attach() const;
  void clear_attach();
  static const int kAttachFieldNumber = 50;
  private:
  const ::com::fleetmgr::interfaces::facade::control::SetupRequest& _internal_attach() const;
  public:
  const ::com::fleetmgr::interfaces::facade::control::SetupRequest& attach() const;
  ::com::fleetmgr::interfaces::facade::control::SetupRequest* release_attach();
  ::com::fleetmgr::interfaces::facade::control::SetupRequest* mutable_attach();
  void set_allocated_attach(::com::fleetmgr::interfaces::facade::control::SetupRequest* attach);

  // .com.fleetmgr.interfaces.AddChannelsRequest requestChannels = 51;
  bool has_requestchannels() const;
  void clear_requestchannels();
  static const int kRequestChannelsFieldNumber = 51;
  private:
  const ::com::fleetmgr::interfaces::AddChannelsRequest& _internal_requestchannels() const;
  public:
  const ::com::fleetmgr::interfaces::AddChannelsRequest& requestchannels() const;
  ::com::fleetmgr::interfaces::AddChannelsRequest* release_requestchannels();
  ::com::fleetmgr::interfaces::AddChannelsRequest* mutable_requestchannels();
  void set_allocated_requestchannels(::com::fleetmgr::interfaces::AddChannelsRequest* requestchannels);

  // .com.fleetmgr.interfaces.ChannelsResponse attachChannels = 100;
  bool has_attachchannels() const;
  void clear_attachchannels();
  static const int kAttachChannelsFieldNumber = 100;
  private:
  const ::com::fleetmgr::interfaces::ChannelsResponse& _internal_attachchannels() const;
  public:
  const ::com::fleetmgr::interfaces::ChannelsResponse& attachchannels() const;
  ::com::fleetmgr::interfaces::ChannelsResponse* release_attachchannels();
  ::com::fleetmgr::interfaces::ChannelsResponse* mutable_attachchannels();
  void set_allocated_attachchannels(::com::fleetmgr::interfaces::ChannelsResponse* attachchannels);

  // .com.fleetmgr.interfaces.HandoverData handoverData = 101;
  bool has_handoverdata() const;
  void clear_handoverdata();
  static const int kHandoverDataFieldNumber = 101;
  private:
  const ::com::fleetmgr::interfaces::HandoverData& _internal_handoverdata() const;
  public:
  const ::com::fleetmgr::interfaces::HandoverData& handoverdata() const;
  ::com::fleetmgr::interfaces::HandoverData* release_handoverdata();
  ::com::fleetmgr::interfaces::HandoverData* mutable_handoverdata();
  void set_allocated_handoverdata(::com::fleetmgr::interfaces::HandoverData* handoverdata);

  // .com.fleetmgr.interfaces.facade.control.HeartbeatResponse heartbeat = 102;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 102;
  private:
  const ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse& _internal_heartbeat() const;
  public:
  const ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse& heartbeat() const;
  ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* release_heartbeat();
  ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* mutable_heartbeat();
  void set_allocated_heartbeat(::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* heartbeat);

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::com::fleetmgr::interfaces::facade::control::Command command() const;
  void set_command(::com::fleetmgr::interfaces::facade::control::Command value);

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  ::com::fleetmgr::interfaces::facade::control::Response response() const;
  void set_response(::com::fleetmgr::interfaces::facade::control::Response value);

  // @@protoc_insertion_point(class_scope:com.fleetmgr.interfaces.facade.control.ClientMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::com::fleetmgr::interfaces::facade::control::SetupRequest* attach_;
  ::com::fleetmgr::interfaces::AddChannelsRequest* requestchannels_;
  ::com::fleetmgr::interfaces::ChannelsResponse* attachchannels_;
  ::com::fleetmgr::interfaces::HandoverData* handoverdata_;
  ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* heartbeat_;
  int command_;
  int response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fleetmgr.interfaces.facade.control.ControlMessage) */ {
 public:
  ControlMessage();
  virtual ~ControlMessage();

  ControlMessage(const ControlMessage& from);

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ControlMessage* other);
  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlMessage* New() const final {
    return CreateMaybeMessage<ControlMessage>(NULL);
  }

  ControlMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlMessage& from);
  void MergeFrom(const ControlMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .com.fleetmgr.interfaces.facade.control.SetupResponse attach = 50;
  bool has_attach() const;
  void clear_attach();
  static const int kAttachFieldNumber = 50;
  private:
  const ::com::fleetmgr::interfaces::facade::control::SetupResponse& _internal_attach() const;
  public:
  const ::com::fleetmgr::interfaces::facade::control::SetupResponse& attach() const;
  ::com::fleetmgr::interfaces::facade::control::SetupResponse* release_attach();
  ::com::fleetmgr::interfaces::facade::control::SetupResponse* mutable_attach();
  void set_allocated_attach(::com::fleetmgr::interfaces::facade::control::SetupResponse* attach);

  // .com.fleetmgr.interfaces.AddChannelsResponse requestChannels = 51;
  bool has_requestchannels() const;
  void clear_requestchannels();
  static const int kRequestChannelsFieldNumber = 51;
  private:
  const ::com::fleetmgr::interfaces::AddChannelsResponse& _internal_requestchannels() const;
  public:
  const ::com::fleetmgr::interfaces::AddChannelsResponse& requestchannels() const;
  ::com::fleetmgr::interfaces::AddChannelsResponse* release_requestchannels();
  ::com::fleetmgr::interfaces::AddChannelsResponse* mutable_requestchannels();
  void set_allocated_requestchannels(::com::fleetmgr::interfaces::AddChannelsResponse* requestchannels);

  // .com.fleetmgr.interfaces.HandoverData handoverData = 52;
  bool has_handoverdata() const;
  void clear_handoverdata();
  static const int kHandoverDataFieldNumber = 52;
  private:
  const ::com::fleetmgr::interfaces::HandoverData& _internal_handoverdata() const;
  public:
  const ::com::fleetmgr::interfaces::HandoverData& handoverdata() const;
  ::com::fleetmgr::interfaces::HandoverData* release_handoverdata();
  ::com::fleetmgr::interfaces::HandoverData* mutable_handoverdata();
  void set_allocated_handoverdata(::com::fleetmgr::interfaces::HandoverData* handoverdata);

  // .com.fleetmgr.interfaces.AttachChannelsRequest attachChannels = 100;
  bool has_attachchannels() const;
  void clear_attachchannels();
  static const int kAttachChannelsFieldNumber = 100;
  private:
  const ::com::fleetmgr::interfaces::AttachChannelsRequest& _internal_attachchannels() const;
  public:
  const ::com::fleetmgr::interfaces::AttachChannelsRequest& attachchannels() const;
  ::com::fleetmgr::interfaces::AttachChannelsRequest* release_attachchannels();
  ::com::fleetmgr::interfaces::AttachChannelsRequest* mutable_attachchannels();
  void set_allocated_attachchannels(::com::fleetmgr::interfaces::AttachChannelsRequest* attachchannels);

  // .com.fleetmgr.interfaces.ChannelsResponse channels = 101;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 101;
  private:
  const ::com::fleetmgr::interfaces::ChannelsResponse& _internal_channels() const;
  public:
  const ::com::fleetmgr::interfaces::ChannelsResponse& channels() const;
  ::com::fleetmgr::interfaces::ChannelsResponse* release_channels();
  ::com::fleetmgr::interfaces::ChannelsResponse* mutable_channels();
  void set_allocated_channels(::com::fleetmgr::interfaces::ChannelsResponse* channels);

  // .com.fleetmgr.interfaces.facade.control.HeartbeatRequest heartbeat = 102;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 102;
  private:
  const ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest& _internal_heartbeat() const;
  public:
  const ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest& heartbeat() const;
  ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* release_heartbeat();
  ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* mutable_heartbeat();
  void set_allocated_heartbeat(::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* heartbeat);

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::com::fleetmgr::interfaces::facade::control::Command command() const;
  void set_command(::com::fleetmgr::interfaces::facade::control::Command value);

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  ::com::fleetmgr::interfaces::facade::control::Response response() const;
  void set_response(::com::fleetmgr::interfaces::facade::control::Response value);

  // @@protoc_insertion_point(class_scope:com.fleetmgr.interfaces.facade.control.ControlMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::com::fleetmgr::interfaces::facade::control::SetupResponse* attach_;
  ::com::fleetmgr::interfaces::AddChannelsResponse* requestchannels_;
  ::com::fleetmgr::interfaces::HandoverData* handoverdata_;
  ::com::fleetmgr::interfaces::AttachChannelsRequest* attachchannels_;
  ::com::fleetmgr::interfaces::ChannelsResponse* channels_;
  ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* heartbeat_;
  int command_;
  int response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// .com.fleetmgr.interfaces.facade.control.Command command = 1;
inline void ClientMessage::clear_command() {
  command_ = 0;
}
inline ::com::fleetmgr::interfaces::facade::control::Command ClientMessage::command() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.command)
  return static_cast< ::com::fleetmgr::interfaces::facade::control::Command >(command_);
}
inline void ClientMessage::set_command(::com::fleetmgr::interfaces::facade::control::Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.facade.control.ClientMessage.command)
}

// .com.fleetmgr.interfaces.facade.control.Response response = 2;
inline void ClientMessage::clear_response() {
  response_ = 0;
}
inline ::com::fleetmgr::interfaces::facade::control::Response ClientMessage::response() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.response)
  return static_cast< ::com::fleetmgr::interfaces::facade::control::Response >(response_);
}
inline void ClientMessage::set_response(::com::fleetmgr::interfaces::facade::control::Response value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.facade.control.ClientMessage.response)
}

// string message = 3;
inline void ClientMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientMessage::message() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
  return message_.GetNoArena();
}
inline void ClientMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
}
#if LANG_CXX11
inline void ClientMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
}
#endif
inline void ClientMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
}
inline void ClientMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
}
inline ::std::string* ClientMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMessage::release_message() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ClientMessage.message)
}

// .com.fleetmgr.interfaces.facade.control.SetupRequest attach = 50;
inline bool ClientMessage::has_attach() const {
  return this != internal_default_instance() && attach_ != NULL;
}
inline const ::com::fleetmgr::interfaces::facade::control::SetupRequest& ClientMessage::_internal_attach() const {
  return *attach_;
}
inline const ::com::fleetmgr::interfaces::facade::control::SetupRequest& ClientMessage::attach() const {
  const ::com::fleetmgr::interfaces::facade::control::SetupRequest* p = attach_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.attach)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::facade::control::SetupRequest*>(
      &::com::fleetmgr::interfaces::facade::control::_SetupRequest_default_instance_);
}
inline ::com::fleetmgr::interfaces::facade::control::SetupRequest* ClientMessage::release_attach() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ClientMessage.attach)
  
  ::com::fleetmgr::interfaces::facade::control::SetupRequest* temp = attach_;
  attach_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::facade::control::SetupRequest* ClientMessage::mutable_attach() {
  
  if (attach_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::facade::control::SetupRequest>(GetArenaNoVirtual());
    attach_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ClientMessage.attach)
  return attach_;
}
inline void ClientMessage::set_allocated_attach(::com::fleetmgr::interfaces::facade::control::SetupRequest* attach) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attach_);
  }
  if (attach) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attach = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attach, submessage_arena);
    }
    
  } else {
    
  }
  attach_ = attach;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ClientMessage.attach)
}

// .com.fleetmgr.interfaces.AddChannelsRequest requestChannels = 51;
inline bool ClientMessage::has_requestchannels() const {
  return this != internal_default_instance() && requestchannels_ != NULL;
}
inline const ::com::fleetmgr::interfaces::AddChannelsRequest& ClientMessage::_internal_requestchannels() const {
  return *requestchannels_;
}
inline const ::com::fleetmgr::interfaces::AddChannelsRequest& ClientMessage::requestchannels() const {
  const ::com::fleetmgr::interfaces::AddChannelsRequest* p = requestchannels_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.requestChannels)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::AddChannelsRequest*>(
      &::com::fleetmgr::interfaces::_AddChannelsRequest_default_instance_);
}
inline ::com::fleetmgr::interfaces::AddChannelsRequest* ClientMessage::release_requestchannels() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ClientMessage.requestChannels)
  
  ::com::fleetmgr::interfaces::AddChannelsRequest* temp = requestchannels_;
  requestchannels_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::AddChannelsRequest* ClientMessage::mutable_requestchannels() {
  
  if (requestchannels_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::AddChannelsRequest>(GetArenaNoVirtual());
    requestchannels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ClientMessage.requestChannels)
  return requestchannels_;
}
inline void ClientMessage::set_allocated_requestchannels(::com::fleetmgr::interfaces::AddChannelsRequest* requestchannels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requestchannels_);
  }
  if (requestchannels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requestchannels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requestchannels, submessage_arena);
    }
    
  } else {
    
  }
  requestchannels_ = requestchannels;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ClientMessage.requestChannels)
}

// .com.fleetmgr.interfaces.ChannelsResponse attachChannels = 100;
inline bool ClientMessage::has_attachchannels() const {
  return this != internal_default_instance() && attachchannels_ != NULL;
}
inline const ::com::fleetmgr::interfaces::ChannelsResponse& ClientMessage::_internal_attachchannels() const {
  return *attachchannels_;
}
inline const ::com::fleetmgr::interfaces::ChannelsResponse& ClientMessage::attachchannels() const {
  const ::com::fleetmgr::interfaces::ChannelsResponse* p = attachchannels_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.attachChannels)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::ChannelsResponse*>(
      &::com::fleetmgr::interfaces::_ChannelsResponse_default_instance_);
}
inline ::com::fleetmgr::interfaces::ChannelsResponse* ClientMessage::release_attachchannels() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ClientMessage.attachChannels)
  
  ::com::fleetmgr::interfaces::ChannelsResponse* temp = attachchannels_;
  attachchannels_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::ChannelsResponse* ClientMessage::mutable_attachchannels() {
  
  if (attachchannels_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::ChannelsResponse>(GetArenaNoVirtual());
    attachchannels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ClientMessage.attachChannels)
  return attachchannels_;
}
inline void ClientMessage::set_allocated_attachchannels(::com::fleetmgr::interfaces::ChannelsResponse* attachchannels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attachchannels_);
  }
  if (attachchannels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attachchannels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attachchannels, submessage_arena);
    }
    
  } else {
    
  }
  attachchannels_ = attachchannels;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ClientMessage.attachChannels)
}

// .com.fleetmgr.interfaces.HandoverData handoverData = 101;
inline bool ClientMessage::has_handoverdata() const {
  return this != internal_default_instance() && handoverdata_ != NULL;
}
inline const ::com::fleetmgr::interfaces::HandoverData& ClientMessage::_internal_handoverdata() const {
  return *handoverdata_;
}
inline const ::com::fleetmgr::interfaces::HandoverData& ClientMessage::handoverdata() const {
  const ::com::fleetmgr::interfaces::HandoverData* p = handoverdata_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.handoverData)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::HandoverData*>(
      &::com::fleetmgr::interfaces::_HandoverData_default_instance_);
}
inline ::com::fleetmgr::interfaces::HandoverData* ClientMessage::release_handoverdata() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ClientMessage.handoverData)
  
  ::com::fleetmgr::interfaces::HandoverData* temp = handoverdata_;
  handoverdata_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::HandoverData* ClientMessage::mutable_handoverdata() {
  
  if (handoverdata_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::HandoverData>(GetArenaNoVirtual());
    handoverdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ClientMessage.handoverData)
  return handoverdata_;
}
inline void ClientMessage::set_allocated_handoverdata(::com::fleetmgr::interfaces::HandoverData* handoverdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(handoverdata_);
  }
  if (handoverdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      handoverdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, handoverdata, submessage_arena);
    }
    
  } else {
    
  }
  handoverdata_ = handoverdata;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ClientMessage.handoverData)
}

// .com.fleetmgr.interfaces.facade.control.HeartbeatResponse heartbeat = 102;
inline bool ClientMessage::has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != NULL;
}
inline const ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse& ClientMessage::_internal_heartbeat() const {
  return *heartbeat_;
}
inline const ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse& ClientMessage::heartbeat() const {
  const ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* p = heartbeat_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ClientMessage.heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse*>(
      &::com::fleetmgr::interfaces::facade::control::_HeartbeatResponse_default_instance_);
}
inline ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* ClientMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ClientMessage.heartbeat)
  
  ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* ClientMessage::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::facade::control::HeartbeatResponse>(GetArenaNoVirtual());
    heartbeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ClientMessage.heartbeat)
  return heartbeat_;
}
inline void ClientMessage::set_allocated_heartbeat(::com::fleetmgr::interfaces::facade::control::HeartbeatResponse* heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heartbeat_);
  }
  if (heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ClientMessage.heartbeat)
}

// -------------------------------------------------------------------

// ControlMessage

// .com.fleetmgr.interfaces.facade.control.Command command = 1;
inline void ControlMessage::clear_command() {
  command_ = 0;
}
inline ::com::fleetmgr::interfaces::facade::control::Command ControlMessage::command() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.command)
  return static_cast< ::com::fleetmgr::interfaces::facade::control::Command >(command_);
}
inline void ControlMessage::set_command(::com::fleetmgr::interfaces::facade::control::Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.facade.control.ControlMessage.command)
}

// .com.fleetmgr.interfaces.facade.control.Response response = 2;
inline void ControlMessage::clear_response() {
  response_ = 0;
}
inline ::com::fleetmgr::interfaces::facade::control::Response ControlMessage::response() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.response)
  return static_cast< ::com::fleetmgr::interfaces::facade::control::Response >(response_);
}
inline void ControlMessage::set_response(::com::fleetmgr::interfaces::facade::control::Response value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.facade.control.ControlMessage.response)
}

// string message = 3;
inline void ControlMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlMessage::message() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
  return message_.GetNoArena();
}
inline void ControlMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
}
#if LANG_CXX11
inline void ControlMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
}
#endif
inline void ControlMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
}
inline void ControlMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
}
inline ::std::string* ControlMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlMessage::release_message() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.message)
}

// .com.fleetmgr.interfaces.facade.control.SetupResponse attach = 50;
inline bool ControlMessage::has_attach() const {
  return this != internal_default_instance() && attach_ != NULL;
}
inline const ::com::fleetmgr::interfaces::facade::control::SetupResponse& ControlMessage::_internal_attach() const {
  return *attach_;
}
inline const ::com::fleetmgr::interfaces::facade::control::SetupResponse& ControlMessage::attach() const {
  const ::com::fleetmgr::interfaces::facade::control::SetupResponse* p = attach_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.attach)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::facade::control::SetupResponse*>(
      &::com::fleetmgr::interfaces::facade::control::_SetupResponse_default_instance_);
}
inline ::com::fleetmgr::interfaces::facade::control::SetupResponse* ControlMessage::release_attach() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.attach)
  
  ::com::fleetmgr::interfaces::facade::control::SetupResponse* temp = attach_;
  attach_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::facade::control::SetupResponse* ControlMessage::mutable_attach() {
  
  if (attach_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::facade::control::SetupResponse>(GetArenaNoVirtual());
    attach_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.attach)
  return attach_;
}
inline void ControlMessage::set_allocated_attach(::com::fleetmgr::interfaces::facade::control::SetupResponse* attach) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attach_);
  }
  if (attach) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attach = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attach, submessage_arena);
    }
    
  } else {
    
  }
  attach_ = attach;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.attach)
}

// .com.fleetmgr.interfaces.AddChannelsResponse requestChannels = 51;
inline bool ControlMessage::has_requestchannels() const {
  return this != internal_default_instance() && requestchannels_ != NULL;
}
inline const ::com::fleetmgr::interfaces::AddChannelsResponse& ControlMessage::_internal_requestchannels() const {
  return *requestchannels_;
}
inline const ::com::fleetmgr::interfaces::AddChannelsResponse& ControlMessage::requestchannels() const {
  const ::com::fleetmgr::interfaces::AddChannelsResponse* p = requestchannels_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.requestChannels)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::AddChannelsResponse*>(
      &::com::fleetmgr::interfaces::_AddChannelsResponse_default_instance_);
}
inline ::com::fleetmgr::interfaces::AddChannelsResponse* ControlMessage::release_requestchannels() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.requestChannels)
  
  ::com::fleetmgr::interfaces::AddChannelsResponse* temp = requestchannels_;
  requestchannels_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::AddChannelsResponse* ControlMessage::mutable_requestchannels() {
  
  if (requestchannels_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::AddChannelsResponse>(GetArenaNoVirtual());
    requestchannels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.requestChannels)
  return requestchannels_;
}
inline void ControlMessage::set_allocated_requestchannels(::com::fleetmgr::interfaces::AddChannelsResponse* requestchannels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requestchannels_);
  }
  if (requestchannels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requestchannels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requestchannels, submessage_arena);
    }
    
  } else {
    
  }
  requestchannels_ = requestchannels;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.requestChannels)
}

// .com.fleetmgr.interfaces.HandoverData handoverData = 52;
inline bool ControlMessage::has_handoverdata() const {
  return this != internal_default_instance() && handoverdata_ != NULL;
}
inline const ::com::fleetmgr::interfaces::HandoverData& ControlMessage::_internal_handoverdata() const {
  return *handoverdata_;
}
inline const ::com::fleetmgr::interfaces::HandoverData& ControlMessage::handoverdata() const {
  const ::com::fleetmgr::interfaces::HandoverData* p = handoverdata_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.handoverData)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::HandoverData*>(
      &::com::fleetmgr::interfaces::_HandoverData_default_instance_);
}
inline ::com::fleetmgr::interfaces::HandoverData* ControlMessage::release_handoverdata() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.handoverData)
  
  ::com::fleetmgr::interfaces::HandoverData* temp = handoverdata_;
  handoverdata_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::HandoverData* ControlMessage::mutable_handoverdata() {
  
  if (handoverdata_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::HandoverData>(GetArenaNoVirtual());
    handoverdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.handoverData)
  return handoverdata_;
}
inline void ControlMessage::set_allocated_handoverdata(::com::fleetmgr::interfaces::HandoverData* handoverdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(handoverdata_);
  }
  if (handoverdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      handoverdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, handoverdata, submessage_arena);
    }
    
  } else {
    
  }
  handoverdata_ = handoverdata;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.handoverData)
}

// .com.fleetmgr.interfaces.AttachChannelsRequest attachChannels = 100;
inline bool ControlMessage::has_attachchannels() const {
  return this != internal_default_instance() && attachchannels_ != NULL;
}
inline const ::com::fleetmgr::interfaces::AttachChannelsRequest& ControlMessage::_internal_attachchannels() const {
  return *attachchannels_;
}
inline const ::com::fleetmgr::interfaces::AttachChannelsRequest& ControlMessage::attachchannels() const {
  const ::com::fleetmgr::interfaces::AttachChannelsRequest* p = attachchannels_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.attachChannels)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::AttachChannelsRequest*>(
      &::com::fleetmgr::interfaces::_AttachChannelsRequest_default_instance_);
}
inline ::com::fleetmgr::interfaces::AttachChannelsRequest* ControlMessage::release_attachchannels() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.attachChannels)
  
  ::com::fleetmgr::interfaces::AttachChannelsRequest* temp = attachchannels_;
  attachchannels_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::AttachChannelsRequest* ControlMessage::mutable_attachchannels() {
  
  if (attachchannels_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::AttachChannelsRequest>(GetArenaNoVirtual());
    attachchannels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.attachChannels)
  return attachchannels_;
}
inline void ControlMessage::set_allocated_attachchannels(::com::fleetmgr::interfaces::AttachChannelsRequest* attachchannels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attachchannels_);
  }
  if (attachchannels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attachchannels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attachchannels, submessage_arena);
    }
    
  } else {
    
  }
  attachchannels_ = attachchannels;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.attachChannels)
}

// .com.fleetmgr.interfaces.ChannelsResponse channels = 101;
inline bool ControlMessage::has_channels() const {
  return this != internal_default_instance() && channels_ != NULL;
}
inline const ::com::fleetmgr::interfaces::ChannelsResponse& ControlMessage::_internal_channels() const {
  return *channels_;
}
inline const ::com::fleetmgr::interfaces::ChannelsResponse& ControlMessage::channels() const {
  const ::com::fleetmgr::interfaces::ChannelsResponse* p = channels_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.channels)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::ChannelsResponse*>(
      &::com::fleetmgr::interfaces::_ChannelsResponse_default_instance_);
}
inline ::com::fleetmgr::interfaces::ChannelsResponse* ControlMessage::release_channels() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.channels)
  
  ::com::fleetmgr::interfaces::ChannelsResponse* temp = channels_;
  channels_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::ChannelsResponse* ControlMessage::mutable_channels() {
  
  if (channels_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::ChannelsResponse>(GetArenaNoVirtual());
    channels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.channels)
  return channels_;
}
inline void ControlMessage::set_allocated_channels(::com::fleetmgr::interfaces::ChannelsResponse* channels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channels_);
  }
  if (channels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channels, submessage_arena);
    }
    
  } else {
    
  }
  channels_ = channels;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.channels)
}

// .com.fleetmgr.interfaces.facade.control.HeartbeatRequest heartbeat = 102;
inline bool ControlMessage::has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != NULL;
}
inline const ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest& ControlMessage::_internal_heartbeat() const {
  return *heartbeat_;
}
inline const ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest& ControlMessage::heartbeat() const {
  const ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* p = heartbeat_;
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.facade.control.ControlMessage.heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest*>(
      &::com::fleetmgr::interfaces::facade::control::_HeartbeatRequest_default_instance_);
}
inline ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* ControlMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.facade.control.ControlMessage.heartbeat)
  
  ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* ControlMessage::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    auto* p = CreateMaybeMessage<::com::fleetmgr::interfaces::facade::control::HeartbeatRequest>(GetArenaNoVirtual());
    heartbeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.facade.control.ControlMessage.heartbeat)
  return heartbeat_;
}
inline void ControlMessage::set_allocated_heartbeat(::com::fleetmgr::interfaces::facade::control::HeartbeatRequest* heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heartbeat_);
  }
  if (heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.facade.control.ControlMessage.heartbeat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace facade
}  // namespace interfaces
}  // namespace fleetmgr
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fleetmgr::interfaces::facade::control::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fleetmgr::interfaces::facade::control::Command>() {
  return ::com::fleetmgr::interfaces::facade::control::Command_descriptor();
}
template <> struct is_proto_enum< ::com::fleetmgr::interfaces::facade::control::Response> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fleetmgr::interfaces::facade::control::Response>() {
  return ::com::fleetmgr::interfaces::facade::control::Response_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_facade_2fcontrol_2ffacade_5fservice_2eproto
