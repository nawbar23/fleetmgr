// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: facade/control/facade_service.proto

#include "facade/control/facade_service.pb.h"
#include "facade/control/facade_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace fleetmgr {
namespace interfaces {
namespace facade {
namespace control {

static const char* FacadeService_method_names[] = {
  "/com.fleetmgr.interfaces.facade.control.FacadeService/control",
};

std::unique_ptr< FacadeService::Stub> FacadeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FacadeService::Stub> stub(new FacadeService::Stub(channel));
  return stub;
}

FacadeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_control_(FacadeService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>* FacadeService::Stub::controlRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>::Create(channel_.get(), rpcmethod_control_, context);
}

::grpc::ClientAsyncReaderWriter< ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>* FacadeService::Stub::AsynccontrolRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>::Create(channel_.get(), cq, rpcmethod_control_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>* FacadeService::Stub::PrepareAsynccontrolRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>::Create(channel_.get(), cq, rpcmethod_control_, context, false, nullptr);
}

FacadeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FacadeService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FacadeService::Service, ::com::fleetmgr::interfaces::facade::control::ClientMessage, ::com::fleetmgr::interfaces::facade::control::ControlMessage>(
          std::mem_fn(&FacadeService::Service::control), this)));
}

FacadeService::Service::~Service() {
}

::grpc::Status FacadeService::Service::control(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::com::fleetmgr::interfaces::facade::control::ControlMessage, ::com::fleetmgr::interfaces::facade::control::ClientMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace fleetmgr
}  // namespace interfaces
}  // namespace facade
}  // namespace control

