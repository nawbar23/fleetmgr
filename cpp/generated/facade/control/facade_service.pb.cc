// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facade/control/facade_service.proto

#include "facade/control/facade_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fadd_5fchannels_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fadd_5fchannels_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AddChannelsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fadd_5fchannels_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddChannelsResponse;
}  // namespace protobuf_common_2fadd_5fchannels_2eproto
namespace protobuf_common_2fattach_5fchannels_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fattach_5fchannels_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelsResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fattach_5fchannels_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AttachChannelsRequest;
}  // namespace protobuf_common_2fattach_5fchannels_2eproto
namespace protobuf_common_2fhandover_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fhandover_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HandoverData;
}  // namespace protobuf_common_2fhandover_5fdata_2eproto
namespace protobuf_facade_2fcontrol_2fheartbeat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_facade_2fcontrol_2fheartbeat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeartbeatRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_facade_2fcontrol_2fheartbeat_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HeartbeatResponse;
}  // namespace protobuf_facade_2fcontrol_2fheartbeat_2eproto
namespace protobuf_facade_2fcontrol_2fsetup_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_facade_2fcontrol_2fsetup_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetupRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_facade_2fcontrol_2fsetup_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetupResponse;
}  // namespace protobuf_facade_2fcontrol_2fsetup_2eproto
namespace com {
namespace fleetmgr {
namespace interfaces {
namespace facade {
namespace control {
class ClientMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientMessage>
      _instance;
} _ClientMessage_default_instance_;
class ControlMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlMessage>
      _instance;
} _ControlMessage_default_instance_;
}  // namespace control
}  // namespace facade
}  // namespace interfaces
}  // namespace fleetmgr
}  // namespace com
namespace protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto {
static void InitDefaultsClientMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_;
    new (ptr) ::com::fleetmgr::interfaces::facade::control::ClientMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::fleetmgr::interfaces::facade::control::ClientMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ClientMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsClientMessage}, {
      &protobuf_facade_2fcontrol_2fsetup_2eproto::scc_info_SetupRequest.base,
      &protobuf_common_2fadd_5fchannels_2eproto::scc_info_AddChannelsRequest.base,
      &protobuf_common_2fattach_5fchannels_2eproto::scc_info_ChannelsResponse.base,
      &protobuf_common_2fhandover_5fdata_2eproto::scc_info_HandoverData.base,
      &protobuf_facade_2fcontrol_2fheartbeat_2eproto::scc_info_HeartbeatResponse.base,}};

static void InitDefaultsControlMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_;
    new (ptr) ::com::fleetmgr::interfaces::facade::control::ControlMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::fleetmgr::interfaces::facade::control::ControlMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ControlMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsControlMessage}, {
      &protobuf_facade_2fcontrol_2fsetup_2eproto::scc_info_SetupResponse.base,
      &protobuf_common_2fadd_5fchannels_2eproto::scc_info_AddChannelsResponse.base,
      &protobuf_common_2fhandover_5fdata_2eproto::scc_info_HandoverData.base,
      &protobuf_common_2fattach_5fchannels_2eproto::scc_info_AttachChannelsRequest.base,
      &protobuf_common_2fattach_5fchannels_2eproto::scc_info_ChannelsResponse.base,
      &protobuf_facade_2fcontrol_2fheartbeat_2eproto::scc_info_HeartbeatRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ClientMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlMessage.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, attach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, requestchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, attachchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, handoverdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ClientMessage, heartbeat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, attach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, requestchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, handoverdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, attachchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::fleetmgr::interfaces::facade::control::ControlMessage, heartbeat_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::fleetmgr::interfaces::facade::control::ClientMessage)},
  { 13, -1, sizeof(::com::fleetmgr::interfaces::facade::control::ControlMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "facade/control/facade_service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#facade/control/facade_service.proto\022&c"
      "om.fleetmgr.interfaces.facade.control\032\031c"
      "ommon/add_channels.proto\032\034common/attach_"
      "channels.proto\032\032common/handover_data.pro"
      "to\032\032facade/control/setup.proto\032\036facade/c"
      "ontrol/heartbeat.proto\"\200\004\n\rClientMessage"
      "\022@\n\007command\030\001 \001(\0162/.com.fleetmgr.interfa"
      "ces.facade.control.Command\022B\n\010response\030\002"
      " \001(\01620.com.fleetmgr.interfaces.facade.co"
      "ntrol.Response\022\017\n\007message\030\003 \001(\t\022D\n\006attac"
      "h\0302 \001(\01324.com.fleetmgr.interfaces.facade"
      ".control.SetupRequest\022D\n\017requestChannels"
      "\0303 \001(\0132+.com.fleetmgr.interfaces.AddChan"
      "nelsRequest\022A\n\016attachChannels\030d \001(\0132).co"
      "m.fleetmgr.interfaces.ChannelsResponse\022;"
      "\n\014handoverData\030e \001(\0132%.com.fleetmgr.inte"
      "rfaces.HandoverData\022L\n\theartbeat\030f \001(\01329"
      ".com.fleetmgr.interfaces.facade.control."
      "HeartbeatResponse\"\304\004\n\016ControlMessage\022@\n\007"
      "command\030\001 \001(\0162/.com.fleetmgr.interfaces."
      "facade.control.Command\022B\n\010response\030\002 \001(\016"
      "20.com.fleetmgr.interfaces.facade.contro"
      "l.Response\022\017\n\007message\030\003 \001(\t\022E\n\006attach\0302 "
      "\001(\01325.com.fleetmgr.interfaces.facade.con"
      "trol.SetupResponse\022E\n\017requestChannels\0303 "
      "\001(\0132,.com.fleetmgr.interfaces.AddChannel"
      "sResponse\022;\n\014handoverData\0304 \001(\0132%.com.fl"
      "eetmgr.interfaces.HandoverData\022F\n\016attach"
      "Channels\030d \001(\0132..com.fleetmgr.interfaces"
      ".AttachChannelsRequest\022;\n\010channels\030e \001(\013"
      "2).com.fleetmgr.interfaces.ChannelsRespo"
      "nse\022K\n\theartbeat\030f \001(\01328.com.fleetmgr.in"
      "terfaces.facade.control.HeartbeatRequest"
      "*\345\002\n\007Command\022\021\n\rUNDEFINED_CMD\020\000\022\r\n\tHEART"
      "BEAT\020\001\022\t\n\005SETUP\020\002\022\013\n\007RELEASE\020\003\022\020\n\014ADD_CH"
      "ANNELS\020\013\022\023\n\017REMOVE_CHANNELS\020\014\022\023\n\017ATTACH_"
      "CHANNELS\020\r\022\024\n\020RELEASE_CHANNELS\020\016\022\022\n\016CHAN"
      "NELS_READY\020\017\022\023\n\017REQUEST_CONTROL\020\025\022\023\n\017REL"
      "EASE_CONTROL\020\026\022\024\n\020CONTROL_RELEASED\020\027\022\021\n\r"
      "CONTROL_READY\020\030\022\023\n\017OPERATION_ENDED\020\037\022\026\n\022"
      "DEVICE_UNREACHABLE\020)\022\026\n\022LEADER_UNREACHAB"
      "LE\020*\022\014\n\010RECOVERY\020+\022\024\n\020DEVICE_RECOVERED\020,"
      "*9\n\010Response\022\021\n\rUNDEFINED_RSP\020\000\022\014\n\010ACCEP"
      "TED\020\001\022\014\n\010REJECTED\020\0022\215\001\n\rFacadeService\022|\n"
      "\007control\0225.com.fleetmgr.interfaces.facad"
      "e.control.ClientMessage\0326.com.fleetmgr.i"
      "nterfaces.facade.control.ControlMessage("
      "\0010\001B\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "facade/control/facade_service.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2fadd_5fchannels_2eproto::AddDescriptors();
  ::protobuf_common_2fattach_5fchannels_2eproto::AddDescriptors();
  ::protobuf_common_2fhandover_5fdata_2eproto::AddDescriptors();
  ::protobuf_facade_2fcontrol_2fsetup_2eproto::AddDescriptors();
  ::protobuf_facade_2fcontrol_2fheartbeat_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto
namespace com {
namespace fleetmgr {
namespace interfaces {
namespace facade {
namespace control {
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
    case 22:
    case 23:
    case 24:
    case 31:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Response_descriptor() {
  protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool Response_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ClientMessage::InitAsDefaultInstance() {
  ::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_._instance.get_mutable()->attach_ = const_cast< ::com::fleetmgr::interfaces::facade::control::SetupRequest*>(
      ::com::fleetmgr::interfaces::facade::control::SetupRequest::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_._instance.get_mutable()->requestchannels_ = const_cast< ::com::fleetmgr::interfaces::AddChannelsRequest*>(
      ::com::fleetmgr::interfaces::AddChannelsRequest::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_._instance.get_mutable()->attachchannels_ = const_cast< ::com::fleetmgr::interfaces::ChannelsResponse*>(
      ::com::fleetmgr::interfaces::ChannelsResponse::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_._instance.get_mutable()->handoverdata_ = const_cast< ::com::fleetmgr::interfaces::HandoverData*>(
      ::com::fleetmgr::interfaces::HandoverData::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ClientMessage_default_instance_._instance.get_mutable()->heartbeat_ = const_cast< ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse*>(
      ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse::internal_default_instance());
}
void ClientMessage::clear_attach() {
  if (GetArenaNoVirtual() == NULL && attach_ != NULL) {
    delete attach_;
  }
  attach_ = NULL;
}
void ClientMessage::clear_requestchannels() {
  if (GetArenaNoVirtual() == NULL && requestchannels_ != NULL) {
    delete requestchannels_;
  }
  requestchannels_ = NULL;
}
void ClientMessage::clear_attachchannels() {
  if (GetArenaNoVirtual() == NULL && attachchannels_ != NULL) {
    delete attachchannels_;
  }
  attachchannels_ = NULL;
}
void ClientMessage::clear_handoverdata() {
  if (GetArenaNoVirtual() == NULL && handoverdata_ != NULL) {
    delete handoverdata_;
  }
  handoverdata_ = NULL;
}
void ClientMessage::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) {
    delete heartbeat_;
  }
  heartbeat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMessage::kCommandFieldNumber;
const int ClientMessage::kResponseFieldNumber;
const int ClientMessage::kMessageFieldNumber;
const int ClientMessage::kAttachFieldNumber;
const int ClientMessage::kRequestChannelsFieldNumber;
const int ClientMessage::kAttachChannelsFieldNumber;
const int ClientMessage::kHandoverDataFieldNumber;
const int ClientMessage::kHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMessage::ClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::scc_info_ClientMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fleetmgr.interfaces.facade.control.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_attach()) {
    attach_ = new ::com::fleetmgr::interfaces::facade::control::SetupRequest(*from.attach_);
  } else {
    attach_ = NULL;
  }
  if (from.has_requestchannels()) {
    requestchannels_ = new ::com::fleetmgr::interfaces::AddChannelsRequest(*from.requestchannels_);
  } else {
    requestchannels_ = NULL;
  }
  if (from.has_attachchannels()) {
    attachchannels_ = new ::com::fleetmgr::interfaces::ChannelsResponse(*from.attachchannels_);
  } else {
    attachchannels_ = NULL;
  }
  if (from.has_handoverdata()) {
    handoverdata_ = new ::com::fleetmgr::interfaces::HandoverData(*from.handoverdata_);
  } else {
    handoverdata_ = NULL;
  }
  if (from.has_heartbeat()) {
    heartbeat_ = new ::com::fleetmgr::interfaces::facade::control::HeartbeatResponse(*from.heartbeat_);
  } else {
    heartbeat_ = NULL;
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&command_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:com.fleetmgr.interfaces.facade.control.ClientMessage)
}

void ClientMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&attach_)) + sizeof(response_));
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:com.fleetmgr.interfaces.facade.control.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_;
  if (this != internal_default_instance()) delete requestchannels_;
  if (this != internal_default_instance()) delete attachchannels_;
  if (this != internal_default_instance()) delete handoverdata_;
  if (this != internal_default_instance()) delete heartbeat_;
}

void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientMessage& ClientMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::scc_info_ClientMessage.base);
  return *internal_default_instance();
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attach_ != NULL) {
    delete attach_;
  }
  attach_ = NULL;
  if (GetArenaNoVirtual() == NULL && requestchannels_ != NULL) {
    delete requestchannels_;
  }
  requestchannels_ = NULL;
  if (GetArenaNoVirtual() == NULL && attachchannels_ != NULL) {
    delete attachchannels_;
  }
  attachchannels_ = NULL;
  if (GetArenaNoVirtual() == NULL && handoverdata_ != NULL) {
    delete handoverdata_;
  }
  handoverdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) {
    delete heartbeat_;
  }
  heartbeat_ = NULL;
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&command_)) + sizeof(response_));
  _internal_metadata_.Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fleetmgr.interfaces.facade.control.Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::com::fleetmgr::interfaces::facade::control::Command >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.facade.control.Response response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response(static_cast< ::com::fleetmgr::interfaces::facade::control::Response >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fleetmgr.interfaces.facade.control.ClientMessage.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.facade.control.SetupRequest attach = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attach()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.AddChannelsRequest requestChannels = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requestchannels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.ChannelsResponse attachChannels = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attachchannels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.HandoverData handoverData = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handoverdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.facade.control.HeartbeatResponse heartbeat = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fleetmgr.interfaces.facade.control.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fleetmgr.interfaces.facade.control.ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fleetmgr.interfaces.facade.control.ClientMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // .com.fleetmgr.interfaces.facade.control.SetupRequest attach = 50;
  if (this->has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_internal_attach(), output);
  }

  // .com.fleetmgr.interfaces.AddChannelsRequest requestChannels = 51;
  if (this->has_requestchannels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_internal_requestchannels(), output);
  }

  // .com.fleetmgr.interfaces.ChannelsResponse attachChannels = 100;
  if (this->has_attachchannels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_attachchannels(), output);
  }

  // .com.fleetmgr.interfaces.HandoverData handoverData = 101;
  if (this->has_handoverdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->_internal_handoverdata(), output);
  }

  // .com.fleetmgr.interfaces.facade.control.HeartbeatResponse heartbeat = 102;
  if (this->has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->_internal_heartbeat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fleetmgr.interfaces.facade.control.ClientMessage)
}

::google::protobuf::uint8* ClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fleetmgr.interfaces.facade.control.ClientMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // .com.fleetmgr.interfaces.facade.control.SetupRequest attach = 50;
  if (this->has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->_internal_attach(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.AddChannelsRequest requestChannels = 51;
  if (this->has_requestchannels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, this->_internal_requestchannels(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.ChannelsResponse attachChannels = 100;
  if (this->has_attachchannels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_attachchannels(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.HandoverData handoverData = 101;
  if (this->has_handoverdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->_internal_handoverdata(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.facade.control.HeartbeatResponse heartbeat = 102;
  if (this->has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, this->_internal_heartbeat(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fleetmgr.interfaces.facade.control.ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .com.fleetmgr.interfaces.facade.control.SetupRequest attach = 50;
  if (this->has_attach()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attach_);
  }

  // .com.fleetmgr.interfaces.AddChannelsRequest requestChannels = 51;
  if (this->has_requestchannels()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requestchannels_);
  }

  // .com.fleetmgr.interfaces.ChannelsResponse attachChannels = 100;
  if (this->has_attachchannels()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attachchannels_);
  }

  // .com.fleetmgr.interfaces.HandoverData handoverData = 101;
  if (this->has_handoverdata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handoverdata_);
  }

  // .com.fleetmgr.interfaces.facade.control.HeartbeatResponse heartbeat = 102;
  if (this->has_heartbeat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heartbeat_);
  }

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  if (this->response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fleetmgr.interfaces.facade.control.ClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fleetmgr.interfaces.facade.control.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_attach()) {
    mutable_attach()->::com::fleetmgr::interfaces::facade::control::SetupRequest::MergeFrom(from.attach());
  }
  if (from.has_requestchannels()) {
    mutable_requestchannels()->::com::fleetmgr::interfaces::AddChannelsRequest::MergeFrom(from.requestchannels());
  }
  if (from.has_attachchannels()) {
    mutable_attachchannels()->::com::fleetmgr::interfaces::ChannelsResponse::MergeFrom(from.attachchannels());
  }
  if (from.has_handoverdata()) {
    mutable_handoverdata()->::com::fleetmgr::interfaces::HandoverData::MergeFrom(from.handoverdata());
  }
  if (from.has_heartbeat()) {
    mutable_heartbeat()->::com::fleetmgr::interfaces::facade::control::HeartbeatResponse::MergeFrom(from.heartbeat());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.response() != 0) {
    set_response(from.response());
  }
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fleetmgr.interfaces.facade.control.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_, other->attach_);
  swap(requestchannels_, other->requestchannels_);
  swap(attachchannels_, other->attachchannels_);
  swap(handoverdata_, other->handoverdata_);
  swap(heartbeat_, other->heartbeat_);
  swap(command_, other->command_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlMessage::InitAsDefaultInstance() {
  ::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_._instance.get_mutable()->attach_ = const_cast< ::com::fleetmgr::interfaces::facade::control::SetupResponse*>(
      ::com::fleetmgr::interfaces::facade::control::SetupResponse::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_._instance.get_mutable()->requestchannels_ = const_cast< ::com::fleetmgr::interfaces::AddChannelsResponse*>(
      ::com::fleetmgr::interfaces::AddChannelsResponse::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_._instance.get_mutable()->handoverdata_ = const_cast< ::com::fleetmgr::interfaces::HandoverData*>(
      ::com::fleetmgr::interfaces::HandoverData::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_._instance.get_mutable()->attachchannels_ = const_cast< ::com::fleetmgr::interfaces::AttachChannelsRequest*>(
      ::com::fleetmgr::interfaces::AttachChannelsRequest::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_._instance.get_mutable()->channels_ = const_cast< ::com::fleetmgr::interfaces::ChannelsResponse*>(
      ::com::fleetmgr::interfaces::ChannelsResponse::internal_default_instance());
  ::com::fleetmgr::interfaces::facade::control::_ControlMessage_default_instance_._instance.get_mutable()->heartbeat_ = const_cast< ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest*>(
      ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest::internal_default_instance());
}
void ControlMessage::clear_attach() {
  if (GetArenaNoVirtual() == NULL && attach_ != NULL) {
    delete attach_;
  }
  attach_ = NULL;
}
void ControlMessage::clear_requestchannels() {
  if (GetArenaNoVirtual() == NULL && requestchannels_ != NULL) {
    delete requestchannels_;
  }
  requestchannels_ = NULL;
}
void ControlMessage::clear_handoverdata() {
  if (GetArenaNoVirtual() == NULL && handoverdata_ != NULL) {
    delete handoverdata_;
  }
  handoverdata_ = NULL;
}
void ControlMessage::clear_attachchannels() {
  if (GetArenaNoVirtual() == NULL && attachchannels_ != NULL) {
    delete attachchannels_;
  }
  attachchannels_ = NULL;
}
void ControlMessage::clear_channels() {
  if (GetArenaNoVirtual() == NULL && channels_ != NULL) {
    delete channels_;
  }
  channels_ = NULL;
}
void ControlMessage::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) {
    delete heartbeat_;
  }
  heartbeat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlMessage::kCommandFieldNumber;
const int ControlMessage::kResponseFieldNumber;
const int ControlMessage::kMessageFieldNumber;
const int ControlMessage::kAttachFieldNumber;
const int ControlMessage::kRequestChannelsFieldNumber;
const int ControlMessage::kHandoverDataFieldNumber;
const int ControlMessage::kAttachChannelsFieldNumber;
const int ControlMessage::kChannelsFieldNumber;
const int ControlMessage::kHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlMessage::ControlMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::scc_info_ControlMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fleetmgr.interfaces.facade.control.ControlMessage)
}
ControlMessage::ControlMessage(const ControlMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_attach()) {
    attach_ = new ::com::fleetmgr::interfaces::facade::control::SetupResponse(*from.attach_);
  } else {
    attach_ = NULL;
  }
  if (from.has_requestchannels()) {
    requestchannels_ = new ::com::fleetmgr::interfaces::AddChannelsResponse(*from.requestchannels_);
  } else {
    requestchannels_ = NULL;
  }
  if (from.has_handoverdata()) {
    handoverdata_ = new ::com::fleetmgr::interfaces::HandoverData(*from.handoverdata_);
  } else {
    handoverdata_ = NULL;
  }
  if (from.has_attachchannels()) {
    attachchannels_ = new ::com::fleetmgr::interfaces::AttachChannelsRequest(*from.attachchannels_);
  } else {
    attachchannels_ = NULL;
  }
  if (from.has_channels()) {
    channels_ = new ::com::fleetmgr::interfaces::ChannelsResponse(*from.channels_);
  } else {
    channels_ = NULL;
  }
  if (from.has_heartbeat()) {
    heartbeat_ = new ::com::fleetmgr::interfaces::facade::control::HeartbeatRequest(*from.heartbeat_);
  } else {
    heartbeat_ = NULL;
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&command_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:com.fleetmgr.interfaces.facade.control.ControlMessage)
}

void ControlMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attach_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&attach_)) + sizeof(response_));
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:com.fleetmgr.interfaces.facade.control.ControlMessage)
  SharedDtor();
}

void ControlMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attach_;
  if (this != internal_default_instance()) delete requestchannels_;
  if (this != internal_default_instance()) delete handoverdata_;
  if (this != internal_default_instance()) delete attachchannels_;
  if (this != internal_default_instance()) delete channels_;
  if (this != internal_default_instance()) delete heartbeat_;
}

void ControlMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlMessage::descriptor() {
  ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlMessage& ControlMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::scc_info_ControlMessage.base);
  return *internal_default_instance();
}


void ControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attach_ != NULL) {
    delete attach_;
  }
  attach_ = NULL;
  if (GetArenaNoVirtual() == NULL && requestchannels_ != NULL) {
    delete requestchannels_;
  }
  requestchannels_ = NULL;
  if (GetArenaNoVirtual() == NULL && handoverdata_ != NULL) {
    delete handoverdata_;
  }
  handoverdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && attachchannels_ != NULL) {
    delete attachchannels_;
  }
  attachchannels_ = NULL;
  if (GetArenaNoVirtual() == NULL && channels_ != NULL) {
    delete channels_;
  }
  channels_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) {
    delete heartbeat_;
  }
  heartbeat_ = NULL;
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&command_)) + sizeof(response_));
  _internal_metadata_.Clear();
}

bool ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fleetmgr.interfaces.facade.control.Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::com::fleetmgr::interfaces::facade::control::Command >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.facade.control.Response response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response(static_cast< ::com::fleetmgr::interfaces::facade::control::Response >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fleetmgr.interfaces.facade.control.ControlMessage.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.facade.control.SetupResponse attach = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attach()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.AddChannelsResponse requestChannels = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requestchannels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.HandoverData handoverData = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handoverdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.AttachChannelsRequest attachChannels = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attachchannels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.ChannelsResponse channels = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fleetmgr.interfaces.facade.control.HeartbeatRequest heartbeat = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fleetmgr.interfaces.facade.control.ControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fleetmgr.interfaces.facade.control.ControlMessage)
  return false;
#undef DO_
}

void ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fleetmgr.interfaces.facade.control.ControlMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // .com.fleetmgr.interfaces.facade.control.SetupResponse attach = 50;
  if (this->has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_internal_attach(), output);
  }

  // .com.fleetmgr.interfaces.AddChannelsResponse requestChannels = 51;
  if (this->has_requestchannels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_internal_requestchannels(), output);
  }

  // .com.fleetmgr.interfaces.HandoverData handoverData = 52;
  if (this->has_handoverdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->_internal_handoverdata(), output);
  }

  // .com.fleetmgr.interfaces.AttachChannelsRequest attachChannels = 100;
  if (this->has_attachchannels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_attachchannels(), output);
  }

  // .com.fleetmgr.interfaces.ChannelsResponse channels = 101;
  if (this->has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->_internal_channels(), output);
  }

  // .com.fleetmgr.interfaces.facade.control.HeartbeatRequest heartbeat = 102;
  if (this->has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->_internal_heartbeat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fleetmgr.interfaces.facade.control.ControlMessage)
}

::google::protobuf::uint8* ControlMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fleetmgr.interfaces.facade.control.ControlMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // .com.fleetmgr.interfaces.facade.control.SetupResponse attach = 50;
  if (this->has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->_internal_attach(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.AddChannelsResponse requestChannels = 51;
  if (this->has_requestchannels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, this->_internal_requestchannels(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.HandoverData handoverData = 52;
  if (this->has_handoverdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        52, this->_internal_handoverdata(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.AttachChannelsRequest attachChannels = 100;
  if (this->has_attachchannels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_attachchannels(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.ChannelsResponse channels = 101;
  if (this->has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->_internal_channels(), deterministic, target);
  }

  // .com.fleetmgr.interfaces.facade.control.HeartbeatRequest heartbeat = 102;
  if (this->has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, this->_internal_heartbeat(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fleetmgr.interfaces.facade.control.ControlMessage)
  return target;
}

size_t ControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .com.fleetmgr.interfaces.facade.control.SetupResponse attach = 50;
  if (this->has_attach()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attach_);
  }

  // .com.fleetmgr.interfaces.AddChannelsResponse requestChannels = 51;
  if (this->has_requestchannels()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requestchannels_);
  }

  // .com.fleetmgr.interfaces.HandoverData handoverData = 52;
  if (this->has_handoverdata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handoverdata_);
  }

  // .com.fleetmgr.interfaces.AttachChannelsRequest attachChannels = 100;
  if (this->has_attachchannels()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attachchannels_);
  }

  // .com.fleetmgr.interfaces.ChannelsResponse channels = 101;
  if (this->has_channels()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *channels_);
  }

  // .com.fleetmgr.interfaces.facade.control.HeartbeatRequest heartbeat = 102;
  if (this->has_heartbeat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heartbeat_);
  }

  // .com.fleetmgr.interfaces.facade.control.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // .com.fleetmgr.interfaces.facade.control.Response response = 2;
  if (this->response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fleetmgr.interfaces.facade.control.ControlMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fleetmgr.interfaces.facade.control.ControlMessage)
    MergeFrom(*source);
  }
}

void ControlMessage::MergeFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_attach()) {
    mutable_attach()->::com::fleetmgr::interfaces::facade::control::SetupResponse::MergeFrom(from.attach());
  }
  if (from.has_requestchannels()) {
    mutable_requestchannels()->::com::fleetmgr::interfaces::AddChannelsResponse::MergeFrom(from.requestchannels());
  }
  if (from.has_handoverdata()) {
    mutable_handoverdata()->::com::fleetmgr::interfaces::HandoverData::MergeFrom(from.handoverdata());
  }
  if (from.has_attachchannels()) {
    mutable_attachchannels()->::com::fleetmgr::interfaces::AttachChannelsRequest::MergeFrom(from.attachchannels());
  }
  if (from.has_channels()) {
    mutable_channels()->::com::fleetmgr::interfaces::ChannelsResponse::MergeFrom(from.channels());
  }
  if (from.has_heartbeat()) {
    mutable_heartbeat()->::com::fleetmgr::interfaces::facade::control::HeartbeatRequest::MergeFrom(from.heartbeat());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.response() != 0) {
    set_response(from.response());
  }
}

void ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fleetmgr.interfaces.facade.control.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  return true;
}

void ControlMessage::Swap(ControlMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlMessage::InternalSwap(ControlMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_, other->attach_);
  swap(requestchannels_, other->requestchannels_);
  swap(handoverdata_, other->handoverdata_);
  swap(attachchannels_, other->attachchannels_);
  swap(channels_, other->channels_);
  swap(heartbeat_, other->heartbeat_);
  swap(command_, other->command_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlMessage::GetMetadata() const {
  protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facade_2fcontrol_2ffacade_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace facade
}  // namespace interfaces
}  // namespace fleetmgr
}  // namespace com
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::fleetmgr::interfaces::facade::control::ClientMessage* Arena::CreateMaybeMessage< ::com::fleetmgr::interfaces::facade::control::ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::com::fleetmgr::interfaces::facade::control::ClientMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::fleetmgr::interfaces::facade::control::ControlMessage* Arena::CreateMaybeMessage< ::com::fleetmgr::interfaces::facade::control::ControlMessage >(Arena* arena) {
  return Arena::CreateInternal< ::com::fleetmgr::interfaces::facade::control::ControlMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
