// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/list_devices.proto

#ifndef PROTOBUF_INCLUDED_core_2flist_5fdevices_2eproto
#define PROTOBUF_INCLUDED_core_2flist_5fdevices_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/connection_state.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_core_2flist_5fdevices_2eproto 

namespace protobuf_core_2flist_5fdevices_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_core_2flist_5fdevices_2eproto
namespace com {
namespace fleetmgr {
namespace interfaces {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class ListDevicesResponse;
class ListDevicesResponseDefaultTypeInternal;
extern ListDevicesResponseDefaultTypeInternal _ListDevicesResponse_default_instance_;
}  // namespace interfaces
}  // namespace fleetmgr
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::fleetmgr::interfaces::Device* Arena::CreateMaybeMessage<::com::fleetmgr::interfaces::Device>(Arena*);
template<> ::com::fleetmgr::interfaces::ListDevicesResponse* Arena::CreateMaybeMessage<::com::fleetmgr::interfaces::ListDevicesResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace fleetmgr {
namespace interfaces {

// ===================================================================

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fleetmgr.interfaces.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(NULL);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .com.fleetmgr.interfaces.ConnectionState connectionState = 3;
  void clear_connectionstate();
  static const int kConnectionStateFieldNumber = 3;
  ::com::fleetmgr::interfaces::ConnectionState connectionstate() const;
  void set_connectionstate(::com::fleetmgr::interfaces::ConnectionState value);

  // @@protoc_insertion_point(class_scope:com.fleetmgr.interfaces.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 id_;
  int connectionstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2flist_5fdevices_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDevicesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fleetmgr.interfaces.ListDevicesResponse) */ {
 public:
  ListDevicesResponse();
  virtual ~ListDevicesResponse();

  ListDevicesResponse(const ListDevicesResponse& from);

  inline ListDevicesResponse& operator=(const ListDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDevicesResponse(ListDevicesResponse&& from) noexcept
    : ListDevicesResponse() {
    *this = ::std::move(from);
  }

  inline ListDevicesResponse& operator=(ListDevicesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDevicesResponse*>(
               &_ListDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListDevicesResponse* other);
  friend void swap(ListDevicesResponse& a, ListDevicesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDevicesResponse* New() const final {
    return CreateMaybeMessage<ListDevicesResponse>(NULL);
  }

  ListDevicesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDevicesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDevicesResponse& from);
  void MergeFrom(const ListDevicesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fleetmgr.interfaces.Device devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::com::fleetmgr::interfaces::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::com::fleetmgr::interfaces::Device >*
      mutable_devices();
  const ::com::fleetmgr::interfaces::Device& devices(int index) const;
  ::com::fleetmgr::interfaces::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::com::fleetmgr::interfaces::Device >&
      devices() const;

  // @@protoc_insertion_point(class_scope:com.fleetmgr.interfaces.ListDevicesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::fleetmgr::interfaces::Device > devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2flist_5fdevices_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// int64 id = 1;
inline void Device::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Device::id() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.Device.id)
  return id_;
}
inline void Device::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.Device.id)
}

// string name = 2;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.Device.name)
  return name_.GetNoArena();
}
inline void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.Device.name)
}
#if LANG_CXX11
inline void Device::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fleetmgr.interfaces.Device.name)
}
#endif
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fleetmgr.interfaces.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fleetmgr.interfaces.Device.name)
}
inline ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.Device.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.Device.name)
}

// .com.fleetmgr.interfaces.ConnectionState connectionState = 3;
inline void Device::clear_connectionstate() {
  connectionstate_ = 0;
}
inline ::com::fleetmgr::interfaces::ConnectionState Device::connectionstate() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.Device.connectionState)
  return static_cast< ::com::fleetmgr::interfaces::ConnectionState >(connectionstate_);
}
inline void Device::set_connectionstate(::com::fleetmgr::interfaces::ConnectionState value) {
  
  connectionstate_ = value;
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.Device.connectionState)
}

// string type = 4;
inline void Device::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::type() const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.Device.type)
  return type_.GetNoArena();
}
inline void Device::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fleetmgr.interfaces.Device.type)
}
#if LANG_CXX11
inline void Device::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fleetmgr.interfaces.Device.type)
}
#endif
inline void Device::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fleetmgr.interfaces.Device.type)
}
inline void Device::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fleetmgr.interfaces.Device.type)
}
inline ::std::string* Device::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.Device.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_type() {
  // @@protoc_insertion_point(field_release:com.fleetmgr.interfaces.Device.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:com.fleetmgr.interfaces.Device.type)
}

// -------------------------------------------------------------------

// ListDevicesResponse

// repeated .com.fleetmgr.interfaces.Device devices = 1;
inline int ListDevicesResponse::devices_size() const {
  return devices_.size();
}
inline void ListDevicesResponse::clear_devices() {
  devices_.Clear();
}
inline ::com::fleetmgr::interfaces::Device* ListDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:com.fleetmgr.interfaces.ListDevicesResponse.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::fleetmgr::interfaces::Device >*
ListDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:com.fleetmgr.interfaces.ListDevicesResponse.devices)
  return &devices_;
}
inline const ::com::fleetmgr::interfaces::Device& ListDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:com.fleetmgr.interfaces.ListDevicesResponse.devices)
  return devices_.Get(index);
}
inline ::com::fleetmgr::interfaces::Device* ListDevicesResponse::add_devices() {
  // @@protoc_insertion_point(field_add:com.fleetmgr.interfaces.ListDevicesResponse.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fleetmgr::interfaces::Device >&
ListDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:com.fleetmgr.interfaces.ListDevicesResponse.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interfaces
}  // namespace fleetmgr
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_core_2flist_5fdevices_2eproto
